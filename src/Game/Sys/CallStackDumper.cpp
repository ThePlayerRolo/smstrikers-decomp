#include "Game/Sys/CallStackDumper.h"

#include "Dolphin/os/OSError.h"
#include "Dolphin/vi/vifuncs.h"

#include "Dolphin/gx/GXManage.h"
#include "Dolphin/gx/GXFrameBuffer.h"
#include "Dolphin/gx/GXCpu2Efb.h"

#include "NL/nlPrint.h"
#include "NL/glx/glxSwap.h"

static const u8 CallstackDumpFont[0x24 * 0x5E] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00,
    0x0C, 0x00, 0x00, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x04,
    0x80, 0x09, 0x00, 0x09, 0x00, 0x7F, 0xC0, 0x09, 0x00, 0x0A, 0x00, 0x12, 0x00, 0xFF, 0xC0, 0x12,
    0x00, 0x12, 0x00, 0x24, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x1F, 0x00, 0x3F,
    0x80, 0x64, 0x00, 0x64, 0x00, 0x74, 0x00, 0x3C, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x05, 0x80, 0x05,
    0x80, 0x45, 0x80, 0x7F, 0x00, 0x3E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3F, 0xCC,
    0x40, 0xCC, 0x80, 0xCD, 0x00, 0xCD, 0x00, 0x7A, 0x00, 0x04, 0x00, 0x0B, 0xC0, 0x16, 0x7F, 0x16,
    0x7F, 0x26, 0x7F, 0x46, 0x7F, 0x83, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x3F,
    0x00, 0x33, 0x00, 0x33, 0x00, 0x3E, 0x00, 0x1C, 0x00, 0x7C, 0x7F, 0xCC, 0x7F, 0xC6, 0x7F, 0xC3,
    0x40, 0xE3, 0xC0, 0x7F, 0xC0, 0x3E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C,
    0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC0, 0x03, 0xC0, 0x07, 0x00, 0x0E, 0x00, 0x0C, 0x00, 0x1C, 0x00, 0x18, 0x00, 0x18,
    0x00, 0x18, 0x00, 0x18, 0x00, 0x1C, 0x00, 0x0C, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x03, 0xC0, 0x00,
    0xC0, 0x60, 0x00, 0x78, 0x00, 0x1C, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x07, 0x00, 0x03, 0x00, 0x03,
    0x00, 0x03, 0x00, 0x07, 0x00, 0x06, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x78, 0x00, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x6D, 0x80, 0x73, 0x80, 0x00, 0x00, 0x1E, 0x00, 0x33, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0xFF, 0xC0, 0xFF, 0xC0, 0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x04, 0x00,
    0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F,
    0x80, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0x01, 0x80, 0x01, 0x80, 0x03, 0x00, 0x03, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0E, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x18, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x60, 0x00,
    0x00, 0x00, 0x0E, 0x00, 0x3F, 0x80, 0x31, 0x80, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0,
    0x60, 0xC0, 0x31, 0x80, 0x3F, 0x80, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
    0x3E, 0x00, 0x26, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x3F, 0xC0,
    0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x7F, 0x00, 0x43, 0x80, 0x01, 0x80,
    0x01, 0x80, 0x03, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00, 0x7F, 0x80,
    0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x3F, 0x80, 0x01, 0x80, 0x01, 0x80,
    0x03, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x03, 0x80, 0x01, 0x80, 0x01, 0x80, 0x03, 0x80, 0x3F, 0x00,
    0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x07, 0x00, 0x0B, 0x00,
    0x1B, 0x00, 0x13, 0x00, 0x23, 0x00, 0x23, 0x00, 0x7F, 0xC0, 0x7F, 0xC0, 0x03, 0x00, 0x03, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0x80, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
    0x3E, 0x00, 0x3F, 0x00, 0x03, 0x80, 0x01, 0x80, 0x01, 0x80, 0x03, 0x80, 0x3F, 0x00, 0x3E, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x1F, 0x80, 0x38, 0x00, 0x30, 0x00, 0x60, 0x00, 0x67, 0x00,
    0x6F, 0x80, 0x71, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x31, 0xC0, 0x3F, 0x80, 0x1F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0x80, 0x7F, 0x80, 0x01, 0x80, 0x03, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00,
    0x0C, 0x00, 0x08, 0x00, 0x18, 0x00, 0x18, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1F, 0x00, 0x3F, 0x80, 0x31, 0x80, 0x31, 0x80, 0x39, 0x80, 0x1F, 0x00, 0x1F, 0x00,
    0x33, 0x80, 0x60, 0xC0, 0x60, 0xC0, 0x70, 0xC0, 0x3F, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1F, 0x00, 0x3F, 0x80, 0x71, 0x80, 0x60, 0xC0, 0x60, 0xC0, 0x71, 0xC0, 0x3E, 0xC0,
    0x1C, 0xC0, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x80, 0x3F, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00,
    0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x01, 0xC0, 0x07, 0x80, 0x0E, 0x00, 0x38, 0x00, 0x38, 0x00, 0x0E, 0x00, 0x07,
    0x80, 0x01, 0xC0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0,
    0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x70, 0x00, 0x3C, 0x00, 0x0E, 0x00, 0x03, 0x80, 0x03, 0x80, 0x0E, 0x00,
    0x3C, 0x00, 0x70, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x7F, 0x80,
    0x43, 0x80, 0x01, 0x80, 0x01, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x31, 0xC0, 0x60, 0xC0, 0x67, 0xC0,
    0xCC, 0xC0, 0xD8, 0xC0, 0xD9, 0xC0, 0xD9, 0xC0, 0xDE, 0xC0, 0x4C, 0xFF, 0x60, 0x00, 0x30, 0x80,
    0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x1A, 0x00,
    0x13, 0x00, 0x33, 0x00, 0x31, 0x80, 0x3F, 0x80, 0x7F, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0xC0, 0x7F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x7F, 0x80, 0x61, 0x80, 0x61, 0x80, 0x63, 0x80,
    0x7E, 0x00, 0x7F, 0x00, 0x63, 0x80, 0x61, 0x80, 0x61, 0x80, 0x7F, 0x80, 0x7F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0F, 0x80, 0x1F, 0xC0, 0x38, 0x40, 0x70, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00,
    0x60, 0x00, 0x70, 0x00, 0x38, 0x00, 0x1F, 0xC0, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00,
    0x7F, 0x80, 0x61, 0x80, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x63, 0x80,
    0x7F, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x3F, 0xC0, 0x30, 0x00, 0x30, 0x00,
    0x30, 0x00, 0x3F, 0x80, 0x3F, 0x80, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x3F, 0xC0, 0x3F, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x3F, 0xC0, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x3F, 0x80,
    0x3F, 0x80, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x80, 0x1F, 0xC0, 0x38, 0x40, 0x70, 0x00, 0x60, 0x00, 0x63, 0xC0, 0x63, 0xC0, 0x60, 0xC0,
    0x70, 0xC0, 0x38, 0xC0, 0x1F, 0xC0, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC0, 0x60, 0xC0,
    0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x7F, 0xC0, 0x7F, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0,
    0x60, 0xC0, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x7F, 0x80, 0x0C, 0x00, 0x0C, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x7F, 0x80, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x3F, 0x00, 0x3F, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x07, 0x00,
    0x7E, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xC0, 0x63, 0x80, 0x63, 0x00, 0x66, 0x00,
    0x6C, 0x00, 0x78, 0x00, 0x6C, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x63, 0x80, 0x61, 0xC0, 0x60, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00,
    0x7F, 0x80, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE1, 0xC0, 0xE1, 0xC0, 0xF1, 0xC0, 0xD2, 0xC0,
    0xD2, 0xC0, 0xDA, 0xC0, 0xCC, 0xC0, 0xCC, 0xC0, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x60, 0xC0, 0x70, 0xC0, 0x78, 0xC0, 0x78, 0xC0, 0x7C, 0xC0, 0x6C, 0xC0,
    0x66, 0xC0, 0x67, 0xC0, 0x63, 0xC0, 0x63, 0xC0, 0x61, 0xC0, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x1E, 0x00, 0x7F, 0x80, 0x61, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
    0xC0, 0xC0, 0x61, 0x80, 0x7F, 0x80, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x7F, 0x80,
    0x61, 0x80, 0x61, 0x80, 0x63, 0x80, 0x7F, 0x00, 0x7E, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00,
    0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x7F, 0x80, 0x61, 0x80, 0xC0, 0xC0,
    0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x61, 0x80, 0x3F, 0x00, 0x1E, 0x00, 0x03, 0x80,
    0x01, 0xFF, 0x00, 0x40, 0x00, 0x00, 0x7F, 0x00, 0x7F, 0x80, 0x61, 0x80, 0x61, 0x80, 0x63, 0x80,
    0x7F, 0x00, 0x7E, 0x00, 0x67, 0x00, 0x63, 0x00, 0x61, 0x80, 0x61, 0xC0, 0x60, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x1F, 0x80, 0x3F, 0xC0, 0x60, 0x40, 0x60, 0x00, 0x70, 0x00, 0x3E, 0x00, 0x07, 0x80,
    0x01, 0xC0, 0x00, 0xC0, 0x40, 0xC0, 0x7F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0,
    0xFF, 0xC0, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0,
    0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x71, 0xC0, 0x3F, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE0, 0x7F, 0x60, 0x7F, 0x60, 0xC0, 0x70, 0xC0, 0x30, 0xC0, 0x39, 0x80, 0x19, 0x80, 0x19, 0x80,
    0x0D, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xC0, 0x7F,
    0xC0, 0x7F, 0x46, 0x40, 0x4E, 0x40, 0x4A, 0x40, 0x4A, 0x40, 0x6B, 0x40, 0x6B, 0x40, 0x71, 0x80,
    0x31, 0x80, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0x70, 0xC0, 0x31, 0x80, 0x3B, 0x00,
    0x1E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x1F, 0x00, 0x13, 0x80, 0x31, 0x80, 0x61, 0xC0, 0xC0, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0x60, 0xC0, 0x61, 0x80, 0x31, 0x80, 0x1B, 0x00, 0x1E, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x7F, 0xC0,
    0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00,
    0x7F, 0xC0, 0x7F, 0xC0, 0x00, 0x00, 0x0F, 0x80, 0x0F, 0x80, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0F, 0x80, 0x0F, 0x80, 0x00, 0x00,
    0x60, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x18, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x0C, 0x00,
    0x0E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0xC0,
    0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x0E,
    0x00, 0x0A, 0x00, 0x1B, 0x00, 0x1B, 0x00, 0x11, 0x00, 0x31, 0x80, 0x31, 0x80, 0x60, 0xC0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x80,
    0x01, 0x80, 0x01, 0x80, 0x1F, 0x80, 0x31, 0x80, 0x61, 0x80, 0x63, 0x80, 0x7F, 0xFF, 0x3C, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x6F, 0x00, 0x7F, 0x80, 0x71, 0xC0, 0x60, 0xC0,
    0x60, 0xC0, 0x60, 0xC0, 0x71, 0x80, 0x7F, 0x80, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1F, 0x80, 0x3F, 0x80, 0x70, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x70, 0x00, 0x3F, 0x80,
    0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x1E, 0xC0,
    0x3F, 0xC0, 0x31, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x71, 0xC0, 0x3F, 0xC0, 0x1E, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x3F, 0x80, 0x31, 0xC0, 0x60, 0xC0, 0x7F, 0xC0, 0x7F, 0xC0,
    0x60, 0x00, 0x70, 0x00, 0x3F, 0xC0, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x1F, 0x80, 0x18, 0x00,
    0x18, 0x00, 0xFF, 0x80, 0xFF, 0x80, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x1E, 0xC0, 0x3F, 0xC0, 0x31, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0,
    0x60, 0xC0, 0x71, 0xC0, 0x3F, 0xC0, 0x1E, 0xC0, 0x00, 0xC0, 0x3F, 0x80, 0x1F, 0x00, 0x00, 0x00,
    0x60, 0x00, 0x60, 0x00, 0x6F, 0x00, 0x7F, 0x80, 0x71, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80,
    0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x3E, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x03, 0x00, 0x03, 0x00,
    0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x7E, 0x00, 0x7C, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00,
    0x61, 0xC0, 0x63, 0x80, 0x67, 0x00, 0x6E, 0x00, 0x7C, 0x00, 0x6C, 0x00, 0x6E, 0x00, 0x67, 0x00,
    0x63, 0x80, 0x61, 0xC0, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xD9, 0x80, 0xFF, 0xC0, 0xEE, 0xC0, 0xCC, 0xC0, 0xCC, 0xC0, 0xCC, 0xC0, 0xCC, 0xC0, 0xCC, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x7F, 0x80, 0x71, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80,
    0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x3F, 0x80, 0x71, 0xC0,
    0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x71, 0xC0, 0x3F, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6F, 0x00, 0x7F, 0x80, 0x71, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x71, 0x80, 0x7F, 0x80,
    0x6F, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x1E, 0xC0, 0x3F, 0xC0, 0x31, 0xC0, 0x60, 0xC0,
    0x60, 0xC0, 0x60, 0xC0, 0x71, 0xC0, 0x3F, 0xC0, 0x1C, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x00,
    0x37, 0x80, 0x3F, 0x80, 0x38, 0x80, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x7F, 0x00, 0x60, 0x00, 0x70, 0x00, 0x3E, 0x00, 0x0F, 0x00,
    0x01, 0x80, 0x41, 0x80, 0x7F, 0x80, 0x3E, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x7F, 0x80,
    0x7F, 0x80, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x1F, 0x80, 0x0F, 0x80,
    0x00, 0x00, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x61, 0x80, 0x63, 0x80,
    0x7F, 0x80, 0x3D, 0x80, 0x00, 0x00, 0x60, 0xC0, 0x30, 0xC0, 0x31, 0x80, 0x31, 0x80, 0x19, 0x80,
    0x19, 0x00, 0x0D, 0x00, 0x0F, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xC6, 0x7F,
    0xCE, 0x7F, 0x4A, 0x40, 0x4A, 0x40, 0x6B, 0x40, 0x73, 0xC0, 0x71, 0xC0, 0x31, 0x80, 0x31, 0x80,
    0x00, 0x00, 0x70, 0xC0, 0x31, 0x80, 0x1B, 0x00, 0x1F, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x1F, 0x00,
    0x13, 0x00, 0x31, 0x80, 0x61, 0xC0, 0x00, 0x00, 0x60, 0x7F, 0x30, 0x40, 0x30, 0xC0, 0x18, 0x80,
    0x19, 0x80, 0x0D, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x3C, 0x00,
    0x38, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x7F, 0x80, 0x01, 0x80, 0x03, 0x00, 0x06, 0x00, 0x0C, 0x00,
    0x18, 0x00, 0x30, 0x00, 0x7F, 0x80, 0x7F, 0x80, 0x00, 0x00, 0x07, 0x80, 0x0F, 0x80, 0x0C, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x38, 0x00, 0x38, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00,
    0x0F, 0x80, 0x07, 0x80, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3E, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x03, 0x80, 0x03, 0x80, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00,
    0x06, 0x00, 0x3E, 0x00, 0x3C, 0x00
};

// static const char lbl_InstructionSRR0[] = "Instruction at 0x%x (read from SRR0) attempted to";
// static const char lbl_InvalidDAR[] = "access invalid address 0x%x (read from DAR)";
// static const char lbl_CallStack[] = "Call Stack";
// static const char lbl_GPRs[] = "General Purpose Registers";
// static const char lbl_GPRFormat[] = "r%-2d=%08x r%-2d=%08x";
// static const char lbl_LRFormat[] = "LR=%08x";
// static const char lbl_CRFormat[] = "CR=%08x";
// static const char lbl_SRR1Format[] = "SRR1=%08x";
// static const char lbl_DSISRFormat[] = "DSISR=%08x";

/**
 * Offset/Address/Size: 0x2C | 0x801ACE90 | size: 0xB08
 */
void ErrorHandler(unsigned short err, OSContext* ctx, unsigned long dsisr, unsigned long dar)
{
    unsigned int x, y;
    unsigned long color;
    void* fb;
    char buf[0x3C];
    int i;

    // Desaturate the current framebuffer
    for (y = 0; y < 0x1C0; y++)
    {
        for (x = 0; x < 0x280; x++)
        {
            u32 argb;
            GXPeekARGB((u16)x, (u16)y, &argb);
            unsigned char a = argb >> 24;
            unsigned char r = (argb >> 16) & 0xFF;
            unsigned char g = (argb >> 8) & 0xFF;
            unsigned char b = argb & 0xFF;
            unsigned char grey = (r + g + b) / 3;
            color = (a << 24) | (grey << 16) | (grey << 8) | grey;
            GXPokeARGB((u16)x, (u16)y, color);
        }
    }

    fb = glxGetDisplayedBuffer();
    GXPokeColorUpdate(1);
    GXPokeBlendMode((GXBlendMode)0, (GXBlendFactor)1, (GXBlendFactor)0, (GXLogicOp)0xF);

    int drawX = 0x0F;
    int drawY = 0x0F;

    if (err == 2)
    {
        nlSNPrintf(buf, 0x3C, "Instruction at 0x%x (read from SRR0) attempted to", ctx->srr0);
        {
            char* s = buf;
            int cx = drawX;
            while (*s)
            {
                char c = *s++;
                const unsigned char* glyph = (u8*)CallstackDumpFont + (c - 0x20) * 36;
                for (int row = 0; row < 18; row++)
                {
                    unsigned char left = glyph[row * 2];
                    unsigned char right = glyph[row * 2 + 1];
                    for (int col = 0; col < 16; col++)
                    {
                        int on = (col < 8) ? ((left << col) & 0x80) : ((right << (col - 8)) & 0x80);
                        if (on)
                        {
                            GXPokeARGB((u16)(cx + col), (u16)(drawY + row), 0xFFFFFFFF);
                        }
                    }
                }
                cx += 11;
            }
        }
        drawY += 0x13;

        nlSNPrintf(buf, 0x3C, "access invalid address 0x%x (read from DAR)", dar);
        {
            char* s = buf;
            int cx = drawX;
            while (*s)
            {
                char c = *s++;
                const unsigned char* glyph = (u8*)CallstackDumpFont + (c - 0x20) * 36;
                for (int row = 0; row < 18; row++)
                {
                    unsigned char left = glyph[row * 2];
                    unsigned char right = glyph[row * 2 + 1];
                    for (int col = 0; col < 16; col++)
                    {
                        int on = (col < 8) ? ((left << col) & 0x80) : ((right << (col - 8)) & 0x80);
                        if (on)
                        {
                            GXPokeARGB((u16)(cx + col), (u16)(drawY + row), 0xFFFFFFFF);
                        }
                    }
                }
                cx += 11;
            }
        }
        drawY += 0x13;

        nlSNPrintf(buf, 0x3C, "SRR1=%08x", ctx->srr1);
        // draw inline again
        drawY += 0x13;

        nlSNPrintf(buf, 0x3C, "DSISR=%08x", dsisr);
        // draw inline again
        drawY += 0x13;
    }

    // Draw GPRs
    for (i = 0; i < 16; i++)
    {
        nlSNPrintf(buf, 0x3C, "r%-2d=%08x r%-2d=%08x", i, ctx->gpr[i], i + 16, ctx->gpr[i + 16]);
        // draw inline again
        drawY += 0x13;
    }

    nlSNPrintf(buf, 0x3C, "LR=%08x", ctx->lr);
    // draw inline again
    drawY += 0x13;

    nlSNPrintf(buf, 0x3C, "CR=%08x", ctx->cr);
    // draw inline again
    drawY += 0x13;

    // Walk frame chain from r1
    void** frame = (void**)ctx->gpr[1];
    int depth = 0;
    while (frame && depth < 0x10)
    {
        nlSNPrintf(buf, 0x3C, "%08x", (unsigned int)frame[1]);
        // draw inline again
        drawY += 0x13;
        frame = (void**)frame[0];
        depth++;
    }

    GXCopyDisp(fb, 0);
    GXDrawDone();
    GXFlush();

    GXPokeColorUpdate(0);
    VISetBlack(0);
    VISetNextFrameBuffer(fb);
    VIFlush();

    for (;;)
    {
        ; // spin forever
    }
}

/**
 * Offset/Address/Size: 0x0 | 0x801ACE64 | size: 0x2C
 */
void InstallCallStackDumper()
{
    OSSetErrorHandler((unsigned short)OS_ERROR_DSI, (OSErrorHandler)ErrorHandler);
}
